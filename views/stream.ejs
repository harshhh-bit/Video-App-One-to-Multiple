<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="UTF-8">

    <title>Group Video Call</title>
    
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.5/socket.io.js" integrity="sha512-2rUSTSAeOO02jF6eBqENNqPs1EohenJ5j+1dgDPdXSLz9nOlrr8DJk4zW/lDy8rjhGCSonW3Gx812XJQIKZKJQ==" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
</head>

<body>
    <div class="container" id="remote-video">
        <div class="leave">
            <button class="btn" id="leave-btn">Leave</button>
        </div>
        <div class="record" >
            <button class="btn" id="record-btn">Start Recording</button>
        </div>
    </div>    
    
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="/js/materialize.min.js"></script>
    <script src="/js/client.js"></script>
    <script>
        var droneID = "<%= meeting_id %>"; 
        var isHost = "<%= is_host %>";
        
        const socketUrl = 'http://localhost:8000';

        var rtpVideoSenders = []
        var remoteStream = [];
        var remoteVideo;
        var mediaTrack;
        var users_connectionID = [];
        var users_connection = [];

        if (isHost === "true") {
            // Hide the elements
            document.querySelector('.container').style.display='none';
            document.querySelector('.leave').style.display = 'none';
            document.querySelector('.record').style.display = 'none';
        }

        var sdpFunction;
        sdpFunction = (data, to_connid) => {
            socket.emit('sdpProcess', {
                message: data,
                to_connid: to_connid
            });
        }

        var socket = io.connect(socketUrl); //passing socketUrl is optional
        
        socket.on("connect", () => {
            if(socket.connected) { // boolean that indicates whether the client is currently connected to the server
                console.log("Connection Success");
                
                socket.emit("user_info_to_signaling_server", {
                    droneID, isHost
                });
            }
            else {
               console.log("Connection Failed");
            }

            processMedia();
        });

        socket.on('host_already_exists', function() {
            alert('Drone is already streaming');
            window.location.href = '/';
        })
    
        socket.on('new_connection_information', function(host) { // Host -> New User
            if(host !== undefined) {
                $('#remote-video .other').remove();
            
                addUser(host.connectionId);
                createConnection(host.connectionId);
            }
            else {
                alert('Drone is not streaming');
                window.location.href = '/';
            }
        });

        socket.on('host_to_inform', function(data) { // New User -> Host
            createConnection(data.connId);
        });

        function addUser(connId) {
            $('#remote-video').prepend(`
                <video autoplay id="video_` + connId + `"></video>
            `);
        }

        function updateMediaSenders(track, rtpSenders) { // rtpSender => other users
            if (track instanceof MediaStreamTrack) {
                for (var connId in users_connection) {
                    var connections = users_connection[connId];
                    if (connections && (connections.connectionState == "new" || 
                        connections.connectionState == "connecting" || 
                        connections.connectionState == "connected")) {
                        if (rtpSenders[connId] && rtpSenders[connId].track) {
                            rtpSenders[connId].replaceTrack(track);
                        } 
                        else {
                            rtpSenders[connId] = users_connection[connId].addTrack(track);
                        }
                    }
                }
            }
        }

        var iceConfig = {
            iceServers: [
                {
                    urls: 'stun:stun.l.google.com:19302'
                },
                // {
                //     urls: 'stun:stun1.l.google.com:3478'
                // },
                // {
                //     urls: 'stun:stun2.l.google.com:19302'
                // },
                {
                    urls: 'turn:192.158.29.39:3478?transport=udp',
                    credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                    username: '28224511:1379330808'
                }
            ]
        }

        async function createConnection(connId) {
            var connection = new RTCPeerConnection(iceConfig); // iceConfig: for ice candidate exchange
        
            connection.onicecandidate = function(event) {
                if(event.candidate) {
                    sdpFunction(JSON.stringify({
                        'iceCandidate': event.candidate
                    }), connId);
                }
            }
            connection.onnegotiationneeded = async function(event) {
                await createOffer(connId);
            }

            connection.ontrack = function(event) {
                if(!remoteStream[connId]) {
                    remoteStream[connId] = new MediaStream();
                }

                if(event.track.kind == 'video') {
                    remoteStream[connId].getTracks().forEach(t => remoteStream[connId].removeTrack(t));
                    remoteStream[connId].addTrack(event.track);

                    remoteVideo = document.getElementById('video_' + connId);
                    if(remoteVideo) {
                        remoteVideo.srcObject = null;
                        remoteVideo.srcObject = remoteStream[connId];
                        remoteVideo.load();
                    }
                }
            }

            users_connectionID[connId] = connId;
            users_connection[connId] = connection;
            
            updateMediaSenders(mediaTrack, rtpVideoSenders);
        
            return connection;
        }
        
        async function createOffer(connid) {
            var connection = users_connection[connid];
            var offer = await connection.createOffer();

            await connection.setLocalDescription(offer);
            
            sdpFunction(JSON.stringify({
                'offer': connection.localDescription
            }), connid);
        }

        socket.on('sdpProcess', async function(data) {
            await sdpProcess(data.message, data.from_connid);
        });

        async function processMedia() {
            try {
                if(isHost === 'true') {
                    var vStream = null;

                    vStream = await navigator.mediaDevices.getUserMedia({
                        video: true,
                        audio: false
                    });

                    mediaTrack = vStream.getVideoTracks()[0];
                    updateMediaSenders(mediaTrack, rtpVideoSenders);
                }
            }
            catch(err) {
                console.log(err);
            }
        }

        async function sdpProcess(message, from_connid) {
            message = JSON.parse(message);

            if(message.answer) {
                await users_connection[from_connid].setRemoteDescription(new RTCSessionDescription(message.answer));
            }
            else if(message.offer) {
                if(!users_connection[from_connid])
                    await createConnection(from_connid);

                await users_connection[from_connid].setRemoteDescription(new RTCSessionDescription(message.offer));
                var answer = await users_connection[from_connid].createAnswer();
                    
                await users_connection[from_connid].setLocalDescription(answer);

                sdpFunction(JSON.stringify({
                    'answer': answer
                }), from_connid);
            }
            else if(message.iceCandidate) {
                if(!users_connection[from_connid])
                    await createConnection(from_connid);

                try {

                    await users_connection[from_connid].addIceCandidate(message.iceCandidate);

                } 
                catch(error) {
                    console.log(error);
                }
            }
        }

        
        let mediaRecorder;
        let recordedBlobs = [];

        var record_btn = document.querySelector('#record-btn');
        record_btn.addEventListener("click", function() {
            if(record_btn.textContent === 'Start Recording') {
                startRecording();
            }
            else {
                stopRecording();
                
                mediaRecorder.onstop = function() {
                    downloadRecording();
                };
            }
        });
        
        function handleDataAvailable(event) {
            if(event.data && event.data.size > 0) {
                console.log(event.data);
                recordedBlobs.push(event.data);
                console.log(recordedBlobs);
            }
        }

        function startRecording() {
            recordedBlobs = [];

            let options;

            options = {
                mimeType: 'video/webm;codecs=vp9,opus'
            }
            if(!MediaRecorder.isTypeSupported(options.mimeType)) {
                console.error(`${options.mimeType} is not Supported`);
                
                options = {
                    mimeType: 'video/webm;codecs=vp8,opus'
                }
                if(!MediaRecorder.isTypeSupported(options.mimeType)) {
                    console.error(`${options.mimeType} is not Supported`);
                    
                    options = {
                        mimeType: 'video/webm'
                    }
                    if(!MediaRecorder.isTypeSupported(options.mimeType)) {
                        console.error(`${options.mimeType} is not Supported`);
                        
                        options = {
                            mimeType: ''
                        }
                    }
                }
            }

            try {
                let stream = remoteVideo.srcObject;
                mediaRecorder = new MediaRecorder(stream, options);
            } catch(error) {
                console.error("Media recorder error:", error);
            }

            mediaRecorder.start();
            record_btn.style.backgroundColor = '#e70909d6';
            record_btn.textContent = 'Stop Recording';
            mediaRecorder.ondataavailable = handleDataAvailable;
        }

        function stopRecording() {
            record_btn.style.backgroundColor = '#07d63e';
            mediaRecorder.stop();
            record_btn.textContent = 'Start Recording';
        }

        function downloadRecording() {
            const blob = new Blob(recordedBlobs, {
                type: "video/webm"
            });

            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'drone_live_stream_recorded.webm';
            document.body.appendChild(a);
            a.click();
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);
        }


        const leaveButton = document.getElementById('leave-btn');
        leaveButton.onclick = function() {
            window.location.href = '/';
        };

        socket.on('host_left_info', () => {
            alert('Drone has stopped streaming');
            window.location.href = '/';
        });

        socket.on('other_user_left_info', function(connId) {
            users_connectionID[connId] = null;
            users_connection[connId].close();
            users_connection[connId] = null;
        });
    </script>

</body>

</html>